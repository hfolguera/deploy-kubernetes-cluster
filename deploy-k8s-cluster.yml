---
- hosts: cf_k8s_cluster
  remote_user: root
  any_errors_fatal: true

  tasks:
  - name: Disable Swap
    shell: swapoff -a
    when: ansible_swaptotal_mb > 0

  - name: Disable Swap on future startups
    replace:
     path: /etc/fstab
     regexp: '^(/dev/mapper/ol.*-swap.*)'
     replace: '#\1'

  - name: Disable Firewall
    systemd:
      name: firewalld
      state: stopped
      enabled: no

  - name: Add Utils packages
    yum:
      name:
        - vim
        - yum-utils
        - bind-utils
        - net-tools
      state: present

  - name: Ensure br_netfilter is enabled.
    modprobe:
      name: br_netfilter
      state: present

  - name: Configure sysctl - bridge-nf-call-iptables
    sysctl:
      name: net.bridge.bridge-nf-call-iptables
      value: '1'
      state: present
      reload: yes

  - name: Configure sysctl - bridge-nf-call-ip6tables
    sysctl:
      name: net.bridge.bridge-nf-call-ip6tables
      value: '1'
      state: present
      reload: yes

  - name: Configure sysctl - ip_forward
    sysctl:
      name: net.ipv4.ip_forward
      value: '1'
      state: present
      reload: yes

  - name: Add Docker YUM repository
    get_url:
      url: https://download.docker.com/linux/centos/docker-ce.repo
      dest: /etc/yum.repos.d/docker-ce.repo

  - name: Install Docker Packages
    yum:
     name:
       - containerd.io
     state: present

  - name: Start Containerd Service
    systemd:
      name: containerd
      state: started
      enabled: yes

  - name: Add Kubernetes YUM repository
    copy:
      src: kubernetes.repo
      dest: /etc/yum.repos.d/kubernetes.repo

  - name: Install Kubernetes Packages
    yum:
      name:
        - kubelet 
        - kubeadm 
        - kubectl
      state: present

  - name: Start Kubelet Service
    systemd:
      name: kubelet
      state: started
      enabled: yes

  - name: Get Cluster status
    stat:
      path: /etc/kubernetes/admin.conf
    register: cluster_status
    when: is_master|bool == true
    changed_when: cluster_status.stat.exists == false
    failed_when: false

  - name: Generate kubeadm config file
    shell: |
      kubeadm config print init-defaults > /tmp/kubeadm-config.yaml
      sed -i 's/clusterName: kubernetes/clusterName: {{ k8s_cluster_name }}/g' /tmp/kubeadm-config.yaml
      sed -i 's/dnsDomain: cluster.local/dnsDomain: {{ service_dns_domain }}/g' /tmp/kubeadm-config.yaml
      sed -i 's/name: node/name: {{ inventory_hostname }}/g' /tmp/kubeadm-config.yaml
      sed -i 's/advertiseAddress: 1.2.3.4/advertiseAddress: {{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}/g' /tmp/kubeadm-config.yaml
    when: cluster_status.changed == true and is_master|bool == true

  - name: Init Kubernetes cluster
    shell: kubeadm init --config /tmp/kubeadm-config.yaml
    when: cluster_status.changed == true and is_master|bool == true # Idempotence: We supose if admin.conf file exists, cluster has been already initialized 
    register: kubeadm_init_result

    # TROUBLESHOOTING: If kubeadm init fails, you can run the following command to reset the cluster:
    # rm /etc/containerd/config.toml
    # containerd config default | sudo tee /etc/containerd/config.toml >/dev/null 2>&1
    # sed -i 's/SystemdCgroup \= false/SystemdCgroup \= true/g' /etc/containerd/config.toml
    # systemctl restart containerd

  - name: Set KUBECONFIG on .bash_profile
    lineinfile:
      path: /root/.bash_profile
      line: "export KUBECONFIG=/etc/kubernetes/admin.conf"

  - name: Set kubectl alias on .bash_profile
    lineinfile:
      path: /root/.bash_profile
      line: "alias k=kubectl"

  - name: Set kubectl get all alias on .bash_profile
    lineinfile:
      path: /root/.bash_profile
      line: "alias kga='kubectl get all -n'"

  - name: Set kubectl apply alias on .bash_profile
    lineinfile:
      path: /root/.bash_profile
      line: "alias ka='kubectl apply -f'"

  - name: Fetch /etc/kubernetes/admin.conf file
    fetch:
      dest: admin.conf
      flat: yes
      src: /etc/kubernetes/admin.conf
    when: is_master|bool == true

  - name: Copy /etc/kubernetes/admin.conf file
    copy:
      src: admin.conf
      dest: /etc/kubernetes/admin.conf

  - name: Get Installed Network Plugin
    environment:
      KUBECONFIG: "/etc/kubernetes/admin.conf"
    shell: kubectl get all -n kube-system
    register: network_plugin
    when: is_master|bool == true
    changed_when: "'calico' not in network_plugin.stdout"

  - name: Install Network Provider
    environment:
      KUBECONFIG: "/etc/kubernetes/admin.conf"
    shell: kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/refs/heads/master/manifests/calico.yaml
    when: is_master|bool == true and network_plugin.changed == true

  - name: Get cluster nodes
    environment:
      KUBECONFIG: "/etc/kubernetes/admin.conf"
    shell: "kubectl get nodes"
    register: cluster_nodes
    changed_when: inventory_hostname not in cluster_nodes.stdout
    failed_when: false

  - name: Get Token Hash
    shell: "openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2>/dev/null | openssl dgst -sha256 -hex | sed 's/^.* //'"
    register: token_hash
    when: is_master|bool == true

  - name: Get Token
    shell: "kubeadm token list -o json"
    register: token
    when: is_master|bool == true

  - name: Set token global variables
    run_once: true
    set_fact:
      global_token: "{{ token.stdout | from_json }}"
      global_token_hash: "{{ token_hash }}"

  - name: Join worker nodes
    shell: "kubeadm join {{ hostvars[groups['all'][0]]['inventory_hostname'] }}:6443 --token {{ global_token.token }} --discovery-token-ca-cert-hash sha256:{{ global_token_hash.stdout }}"
    when: is_master|bool == false and cluster_nodes.changed == true
